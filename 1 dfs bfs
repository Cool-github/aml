graph={
    '5':['2','3'],
    '2':['4','8'],
    '3':['6'],
    '4':[],
    '8':['7'],
    '6':[],
    '7':[]
}
visited=[]
queue=[]
def bfs(visited,graph,node):
    queue.append(node)
    visited.append(node)
    while queue:
        m=queue.pop(0)
        print(m,end=" ")
        for neighbour in graph[m]:
            
            if neighbour not in visited:
                visited.append(neighbour)
                queue.append(neighbour)

print("BFS Nodes are:")
bfs(visited,graph,'5')


BFS Nodes are:
5 2 3 4 8 6 7 



graph={
    '5':['2','3'],
    '2':['4','8'],
    '3':['6'],
    '4':[],
    '8':['7'],
    '6':[],
    '7':[]
}
visited=[]
stack=[]
def dfs(visited,graph,node):
    if node not in visited:
        visited.append(node)
        stack.append(node)
        
        n=stack.pop(0)#5
        print(n,end=" ")
        for neighbour in graph[node]:#2,3
            dfs(visited,graph,neighbour)

print("DFS nodes are:")
dfs(visited,graph,'5')



BFS Nodes are:
5 2 3 4 8 6 7 
DFS nodes are:
['5']
['5']
5 ['5', '2']
['2']
2 ['5', '2', '4']
['4']
4 ['5', '2', '4', '8']
['8']
8 ['5', '2', '4', '8', '7']
['7']
7 ['5', '2', '4', '8', '7', '3']
['3']
3 ['5', '2', '4', '8', '7', '3', '6']
['6']
6 
