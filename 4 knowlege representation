 from sympy import symbols, Or, Not, Implies, satisfiable
 Rain = symbols('Rain')
 Harry_Visited_Hagrid = symbols('Harry_Visited_Hagrid')
 Harry_Visited_Dumbledore = symbols('Harry_Visited_Dumbledore')
 sentence_1 = Implies(Rain, Harry_Visited_Hagrid)
 sentence_2 = (
    Or(Harry_Visited_Hagrid, Harry_Visited_Dumbledore)
    & Not(Harry_Visited_Hagrid & Harry_Visited_Dumbledore)
 )
 sentence_3 = Harry_Visited_Dumbledore
 knowledge_base = sentence_1 & sentence_2 & sentence_3
 solution = satisfiable(knowledge_base, all_models=True)
 for model in solution:
    if model[Rain]:
        print("It rained today.")
    else:
        print("There is no rain today.")







or 



from sympy import symbols, Not, Implies, Xor, And

# Define propositional variables
rained = symbols('rained')
visited_hagrid = symbols('visited_hagrid')
visited_dumbledore = symbols('visited_dumbledore')

# Define the logical expressions based on the given statements
statement1 = Implies(Not(rained), visited_hagrid)  # If it didn't rain, then Harry visited Hagrid today
statement2 = Xor(visited_hagrid, visited_dumbledore)  # Harry visited either Hagrid or Dumbledore, but not both
statement3 = visited_dumbledore  # Harry visited Dumbledore today

# Combine the statements into a single formula
combined_formula = And(statement1, statement2, statement3)

# Function to check consistency of the combined formula and print evaluations
def check_combined_consistency():
    # Evaluate all possible scenarios for rained and visited_hagrid
    possible_values = [True, False]
    consistent_scenarios = []

    for rained_value in possible_values:#true,false
        for visited_hagrid_value in possible_values:#true,false
            # Substitute the variable values into the combined formula
            results = {
                rained: rained_value,#t
                visited_hagrid: visited_hagrid_value,#f
                visited_dumbledore: True  # We know that Harry visited Dumbledore today
            }
            
            # Evaluate the logical statements individually
            eval_statement1 = statement1.subs(results)#t
            eval_statement2 = statement2.subs(results)#t
            eval_statement3 = statement3.subs(results)#t
            
            # Evaluate the combined formula
            eval_combined_formula = combined_formula.subs(results)#t
            
            # Print the evaluation of each statement and the combined formula
            print(f"rained={rained_value}, visited_hagrid={visited_hagrid_value}, visited_dumbledore=True")
            print(f"  Statement 1 (¬R → H) evaluates to: {eval_statement1}")
            print(f"  Statement 2 (H ⊕ D) evaluates to: {eval_statement2}")
            print(f"  Statement 3 (D) evaluates to: {eval_statement3}")
            print(f"  Combined Formula evaluates to: {eval_combined_formula}\n")
            
            # Append to consistent scenarios if the combined formula is true
            if eval_combined_formula:
                consistent_scenarios.append((rained_value, visited_hagrid_value))#t,f

    return consistent_scenarios

# Find consistent scenarios
consistent_scenarios = check_combined_consistency()#t,f

# Output consistent scenarios
print("Consistent scenarios based on the combined formula:")
if consistent_scenarios:#t,f
    for scenario in consistent_scenarios:
        rained_value, visited_hagrid_value = scenario#t,f
        print(f"rained={rained_value}, visited_hagrid={visited_hagrid_value}, visited_dumbledore=True")
else:
    print("No consistent scenarios found.")

# Output the combined formula for reference
print("\nCombined logical formula:")
print(combined_formula)

-------------------------------------------------------------

class KnowledgeBase:
    def __init__(self):
        self.facts = {}  # Dictionary to store facts (key: fact name, value: fact value)
        self.rules = []  # List to store rules (each rule is a tuple (condition, conclusion))

    def add_fact(self, key, value):
        """Add a fact to the knowledge base."""
        self.facts[key] = value

    def add_rule(self, condition, conclusion):
        """Add a rule to the knowledge base."""
        self.rules.append((condition, conclusion))

    def apply_rules(self):
        """Apply rules to infer new facts."""
        changed = True
        while changed:
            changed = False
            for condition, conclusion in self.rules:
                if self.evaluate_condition(condition):
                    if conclusion[0] not in self.facts:
                        self.add_fact(conclusion[0], conclusion[1])
                        changed = True

    def evaluate_condition(self, condition):
        """Evaluate if the condition is true based on current facts."""
        for fact_key, expected_value in condition:
            if self.facts.get(fact_key) != expected_value:
                return False
        return True

    def get_facts(self):
        """Return all facts in the knowledge base."""
        return self.facts


# Create a knowledge base object
kb = KnowledgeBase()

# Add some initial facts
kb.add_fact('has_wings', True)
kb.add_fact('can_fly', True)
kb.add_fact('lays_eggs', True)
kb.add_fact('is_mammal', False)

# Add some rules
kb.add_rule([('has_wings', True), ('can_fly', True)], ('is_bird', True))
kb.add_rule([('is_bird', True), ('lays_eggs', True)], ('is_oviparous', True))
kb.add_rule([('is_mammal', False), ('lays_eggs', True)], ('is_reptile', False))
kb.add_rule([('has_wings', True), ('is_mammal', False)], ('is_insect', False))
kb.add_rule([('is_bird', True), ('is_oviparous', True)], ('is_penguin', False))
kb.add_rule([('has_wings', True), ('is_mammal', True)], ('is_bat', True))

# Apply rules to infer new facts
kb.apply_rules()

# Print all facts
print("Facts in the Knowledge Base:")
for fact, value in kb.get_facts().items():
    print(f"{fact}: {value}")

