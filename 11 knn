import pandas as pd
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import confusion_matrix, accuracy_score
iris= load_iris()
print("Dataset keys:",iris.keys())
df = pd.DataFrame(iris['data'], columns=iris['feature_names'])
print("Feature Data\n",df.head())
print("Target names:", iris['target_names'])
print("Feature names:",iris['feature_names'])
print("Target array:\n", iris['target'])
X=df
y=iris['target']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)
knn= KNeighborsClassifier(n_neighbors=3)
knn.fit(X_train,y_train)
print("length",len(X_test))
y_pred=knn.predict(X_test)
cm_test = confusion_matrix(y_test,y_pred)
print("Confusion Matrix (Test Data):\n",cm_test)
accuracy_test= accuracy_score(y_test,y_pred)
print("Correct prediction on test data:", accuracy_test)
print("length",len(X_train))
y_train_pred=knn.predict(X_train)
cm_train=confusion_matrix(y_train,y_train_pred)
print("Confusion Matrix (Training Data):\n",cm_train)



op
Dataset keys: dict_keys(['data', 'target', 'frame', 'target_names', 'DESCR', 'feature_names', 'filename', 'data_module'])
Feature Data
    sepal length (cm)  sepal width (cm)  petal length (cm)  petal width (cm)
0                5.1               3.5                1.4               0.2
1                4.9               3.0                1.4               0.2
2                4.7               3.2                1.3               0.2
3                4.6               3.1                1.5               0.2
4                5.0               3.6                1.4               0.2
Target names: ['setosa' 'versicolor' 'virginica']
Feature names: ['sepal length (cm)', 'sepal width (cm)', 'petal length (cm)', 'petal width (cm)']
Target array:
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2
 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 2 2]
length 50
Confusion Matrix (Test Data):
 [[19  0  0]
 [ 0 15  0]
 [ 0  1 15]]
Correct prediction on test data: 0.98
length 100
Confusion Matrix (Training Data):
 [[31  0  0]
 [ 0 33  2]
 [ 0  2 32]]
